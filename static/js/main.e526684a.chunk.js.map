{"version":3,"sources":["components/Currency.js","App.js","index.js"],"names":["Currency","currencyOptions","selectedCurrency","onChangeCurrency","amount","onChangeAmount","className","type","value","onChange","map","currency","API_KEY","BASE_URL","PAIR_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","setAmount","amountInFromCurrency","setAmountInFromCurrency","conversionRate","setConversionRate","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","conversion_rates","base_code","conversion_rate","e","target","parseFloat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAgCeA,EA9BE,SAAC,GAMX,IALLC,EAKI,EALJA,gBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,OACAC,EACI,EADJA,eAGA,OACE,sBAAKC,UAAU,SAAf,UACE,uBACEC,KAAK,SACLD,UAAU,QACVE,MAAOJ,EACPK,SAAUJ,IAEZ,wBAAQG,MAAON,EAAkBO,SAAUN,EAA3C,SACGF,EAAgBS,KAAI,SAACC,GAEpB,OACE,wBAAuBH,MAAOG,EAA9B,SACGA,GADUA,YChBnBC,EAAU,2BACVC,EAAQ,6CAAyCD,EAAzC,eACRE,EAAQ,6CAAyCF,EAAzC,UA6FCG,MA3Ff,WAAe,IAgBTC,EAAUC,EAhBD,EAGiCC,mBAAS,IAH1C,mBAGNjB,EAHM,KAGWkB,EAHX,OAM2BD,qBAN3B,mBAMNE,EANM,KAMQC,EANR,OAOuBH,qBAPvB,mBAONI,EAPM,KAOMC,EAPN,OAQeL,mBAAS,GARxB,mBAQNd,EARM,KAQEoB,EARF,OAS2CN,oBAAS,GATpD,mBASNO,EATM,KASgBC,EAThB,OAU+BR,qBAV/B,mBAUNS,EAVM,KAUUC,EAVV,KA8Db,OA7CIH,GAEFR,EAAab,EACbY,EAAWZ,EAASuB,IAEpBX,EAAWZ,EACXa,EAAab,EAASuB,GAGxBE,qBAAU,WACRC,MAAMjB,GACHkB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEL,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,kBAAkB,GACzDnB,EAAmB,YAAIiB,OAAOC,KAAKH,EAAKI,oBACxCjB,EAAgBa,EAAKK,WACrBhB,EAAcY,GACdP,EAAkBM,EAAKI,iBAAiBH,SAE3C,IAGHN,qBAAU,WACY,MAAhBT,GAAsC,MAAdE,GAC1BQ,MAAM,GAAD,OAAIhB,EAAJ,YAAgBM,EAAhB,YAAgCE,IAClCS,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAELN,EAAkBM,EAAKM,sBAG5B,CAACpB,EAAcE,IAchB,gCACE,oBAAIhB,UAAU,SAAd,gCACA,sBAAKA,UAAU,OAAf,UACE,+BACGW,EADH,IACgBG,EADhB,aAGA,+BACGJ,EADH,IACcM,KAEd,cAAC,EAAD,CACErB,gBAAiBA,EACjBC,iBAAkBkB,EAClBjB,iBAAkB,SAACsC,GAAD,OAAOpB,EAAgBoB,EAAEC,OAAOlC,QAClDJ,OAAQuC,WAAW1B,GACnBZ,eAzBR,SAAgCoC,GAC9BjB,EAAUmB,WAAWF,EAAEC,OAAOlC,QAC9BkB,GAAwB,MAyBpB,cAAC,EAAD,CACEzB,gBAAiBA,EACjBC,iBAAkBoB,EAClBnB,iBAAkB,SAACsC,GAAD,OAAOlB,EAAckB,EAAEC,OAAOlC,QAChDJ,OAAQuC,WAAW3B,GACnBX,eA3BR,SAA8BoC,GAC5BjB,EAAUmB,WAAWF,EAAEC,OAAOlC,QAC9BkB,GAAwB,aCjE5BkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e526684a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Currency = ({\n  currencyOptions,\n  selectedCurrency,\n  onChangeCurrency,\n  amount,\n  onChangeAmount,\n}) => {\n  // destructered props..\n  return (\n    <div className=\"curRow\">\n      <input\n        type=\"number\"\n        className=\"input\"\n        value={amount}\n        onChange={onChangeAmount}\n      />\n      <select value={selectedCurrency} onChange={onChangeCurrency}>\n        {currencyOptions.map((currency) => {\n          /* mapping through currencies to fill the the drop down menu...   */\n          return (\n            <option key={currency} value={currency}>\n              {currency}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n};\n\nexport default Currency;\n","import \"./App.css\";\nimport Currency from \"./components/Currency\";\nimport { useEffect, useState } from \"react\";\n\n// Exchange Rate API to get the up to date conversion rates ...\n\nconst API_KEY = \"2ba9b375187a7da8e7dc13b0\";\nconst BASE_URL = `https://v6.exchangerate-api.com/v6/${API_KEY}/latest/INR`; // to get all conversion rates according to base currency\nconst PAIR_URL = `https://v6.exchangerate-api.com/v6/${API_KEY}/pair/`; // to get single conversion rate based on fromCurrency and toCurrency ..\n\nfunction App() {\n  //useState Hooks..\n\n  const [currencyOptions, setCurrencyOptions] = useState([]); // pass an array to setState\n  // this array contains all the currency options\n  //console.log(currencyOptions);\n  const [fromCurrency, setFromCurrency] = useState(); // state to set currency to be converted\n  const [toCurrency, setToCurrency] = useState(); // state to set converted currency\n  const [amount, setAmount] = useState(1); // initial amount set to 1\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true); // bool to find which amount is to be converted\n  const [conversionRate, setConversionRate] = useState(); // to set conversion rate\n\n  // useState Hooks End ..\n\n  //condition to set toAmount and fromAmount ...\n\n  let toAmount, fromAmount;\n  if (amountInFromCurrency) {\n    // if amount to be converted is in fromAmount\n    fromAmount = amount;\n    toAmount = amount * conversionRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / conversionRate;\n  }\n  // to get the conversion rates in currencyOptions Array and set initial to and from currencies and rates ..\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then((res) => res.json())\n      .then((data) => {\n        //console.log(data);\n        const firstCurrency = Object.keys(data.conversion_rates)[0];\n        setCurrencyOptions([...Object.keys(data.conversion_rates)]);\n        setFromCurrency(data.base_code);\n        setToCurrency(firstCurrency);\n        setConversionRate(data.conversion_rates[firstCurrency]);\n      });\n  }, []); // only renders once as empty array never changes ..\n\n  // to set conversion rate based on pair currencies whenever a particular currency changes ..\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${PAIR_URL}/${fromCurrency}/${toCurrency}`)\n        .then((res) => res.json())\n        .then((data) => {\n          //console.log(data);\n          setConversionRate(data.conversion_rate);\n        });\n    }\n  }, [fromCurrency, toCurrency]); // renders whenever any of these values change ..\n\n  // functions to fill the input field ..\n  function handleFromAmountChange(e) {\n    setAmount(parseFloat(e.target.value));\n    setAmountInFromCurrency(true);\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(parseFloat(e.target.value));\n    setAmountInFromCurrency(false);\n  }\n\n  return (\n    <div>\n      <h1 className=\"header\">Currency Converter</h1>\n      <div className=\"card\">\n        <h3>\n          {fromAmount} {fromCurrency} equals\n        </h3>\n        <h1>\n          {toAmount} {toCurrency}\n        </h1>\n        <Currency\n          currencyOptions={currencyOptions}\n          selectedCurrency={fromCurrency}\n          onChangeCurrency={(e) => setFromCurrency(e.target.value)}\n          amount={parseFloat(fromAmount)}\n          onChangeAmount={handleFromAmountChange}\n        />\n        <Currency\n          currencyOptions={currencyOptions}\n          selectedCurrency={toCurrency}\n          onChangeCurrency={(e) => setToCurrency(e.target.value)}\n          amount={parseFloat(toAmount)}\n          onChangeAmount={handleToAmountChange}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}